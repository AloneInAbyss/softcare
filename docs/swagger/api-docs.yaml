openapi: 3.0.1
info:
  title: üåü SoftCare API
  description: |
    ## SoftCare - Plataforma de Bem-Estar Corporativo

    **SoftCare** √© uma solu√ß√£o completa para oferecer suporte psicossocial e promover o bem-estar emocional dos colaboradores.

    ### üéØ Funcionalidades Principais
    - **üë§ Gest√£o de Usu√°rios** - CRUD completo com autentica√ß√£o segura
    - **üìû Canais de Suporte** - Cadastro e busca de canais de apoio
    - **üìî Di√°rio Emocional** - Registro e an√°lise de humor di√°rio
    - **üß† Avalia√ß√µes Psicossociais** - Question√°rios e c√°lculo de riscos
    - **üìä Logs de Auditoria** - Rastreamento completo de opera√ß√µes

    ### üîê Autentica√ß√£o
    Todos os endpoints (exceto alguns p√∫blicos) requerem **HTTP Basic Authentication**:
    - **Usu√°rio:** `admin`
    - **Senha:** `admin123`

    ### üõ°Ô∏è Seguran√ßa
    - **BCrypt** para criptografia de senhas
    - **Jakarta Validation** para valida√ß√£o robusta
    - **Audit Logging** para rastreamento de seguran√ßa
    - **Spring Security** para controle de acesso

    ### üìä Tecnologias
    - **Spring Boot 3.5.6** - Framework principal
    - **MongoDB 7.0** - Banco de dados NoSQL
    - **Spring Security** - Autentica√ß√£o e autoriza√ß√£o
    - **Java 17** - Plataforma de execu√ß√£o
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Local Development Server
security:
  - HTTPBasicAuthentication: []
tags:
  - name: üë§ Usu√°rios
    description: API para gerenciamento de usu√°rios do sistema SoftCare
  - name: Actuator
    description: Monitor and interact
    externalDocs:
      description: Spring Boot Actuator Web API Documentation
      url: https://docs.spring.io/spring-boot/docs/current/actuator-api/html/
paths:
  /api/v1/users/{id}:
    get:
      tags:
        - üë§ Usu√°rios
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponse'
      security:
        - HTTPBasicAuthentication: []
    put:
      tags:
        - üë§ Usu√°rios
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponse'
      security:
        - HTTPBasicAuthentication: []
    delete:
      tags:
        - üë§ Usu√°rios
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
      security:
        - HTTPBasicAuthentication: []
  /api/v1/support-channels/{id}:
    get:
      tags:
        - support-channel-controller
      operationId: getSupportChannelById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SupportChannel'
    put:
      tags:
        - support-channel-controller
      operationId: updateSupportChannel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportChannel'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SupportChannel'
    delete:
      tags:
        - support-channel-controller
      operationId: deleteSupportChannel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/v1/psychosocial-assessments/{id}:
    get:
      tags:
        - psychosocial-assessment-controller
      operationId: getAssessmentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PsychosocialAssessment'
    put:
      tags:
        - psychosocial-assessment-controller
      operationId: updateAssessment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePsychosocialAssessmentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PsychosocialAssessment'
    delete:
      tags:
        - psychosocial-assessment-controller
      operationId: deleteAssessment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/v1/emotional-diary/{id}:
    get:
      tags:
        - emotional-diary-controller
      operationId: getDiaryEntryById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmotionalDiary'
    put:
      tags:
        - emotional-diary-controller
      operationId: updateDiaryEntry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmotionalDiaryRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmotionalDiary'
    delete:
      tags:
        - emotional-diary-controller
      operationId: deleteDiaryEntry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/v1/users:
    get:
      tags:
        - üë§ Usu√°rios
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
      security:
        - HTTPBasicAuthentication: []
    post:
      tags:
        - üë§ Usu√°rios
      summary: Criar novo usu√°rio
      description: Cria um novo usu√°rio no sistema SoftCare. Este endpoint n√£o requer autentica√ß√£o.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '201':
          description: Usu√°rio criado com sucesso
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Dados inv√°lidos fornecidos
        '409':
          description: Email j√° est√° em uso
      security:
        - HTTPBasicAuthentication: []
  /api/v1/users/{id}/change-password:
    post:
      tags:
        - üë§ Usu√°rios
      operationId: changePassword
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
      security:
        - HTTPBasicAuthentication: []
  /api/v1/users/login:
    post:
      tags:
        - üë§ Usu√°rios
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
      security:
        - HTTPBasicAuthentication: []
  /api/v1/support-channels:
    get:
      tags:
        - support-channel-controller
      operationId: getAllSupportChannels
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportChannel'
    post:
      tags:
        - support-channel-controller
      operationId: createSupportChannel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportChannel'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SupportChannel'
  /api/v1/support-channels/{id}/access:
    post:
      tags:
        - support-channel-controller
      operationId: logChannelAccess
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/psychosocial-assessments:
    post:
      tags:
        - psychosocial-assessment-controller
      operationId: createAssessment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePsychosocialAssessmentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PsychosocialAssessment'
  /api/v1/emotional-diary:
    post:
      tags:
        - emotional-diary-controller
      operationId: createDiaryEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmotionalDiaryRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmotionalDiary'
  /api/v1/users/email/{email}:
    get:
      tags:
        - üë§ Usu√°rios
      operationId: getUserByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponse'
      security:
        - HTTPBasicAuthentication: []
  /api/v1/support-channels/with-website:
    get:
      tags:
        - support-channel-controller
      operationId: getChannelsWithWebsite
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportChannel'
  /api/v1/support-channels/with-phone:
    get:
      tags:
        - support-channel-controller
      operationId: getChannelsWithPhone
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportChannel'
  /api/v1/support-channels/with-email:
    get:
      tags:
        - support-channel-controller
      operationId: getChannelsWithEmail
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportChannel'
  /api/v1/support-channels/search/name:
    get:
      tags:
        - support-channel-controller
      operationId: searchByName
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportChannel'
  /api/v1/support-channels/search/description:
    get:
      tags:
        - support-channel-controller
      operationId: searchByDescription
      parameters:
        - name: text
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportChannel'
  /api/v1/psychosocial-assessments/user/{userId}:
    get:
      tags:
        - psychosocial-assessment-controller
      operationId: getAssessmentsByUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PsychosocialAssessment'
  /api/v1/psychosocial-assessments/user/{userId}/latest:
    get:
      tags:
        - psychosocial-assessment-controller
      operationId: getLatestAssessment
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PsychosocialAssessment'
  /api/v1/psychosocial-assessments/risk-level/{riskLevel}:
    get:
      tags:
        - psychosocial-assessment-controller
      operationId: getAssessmentsByRiskLevel
      parameters:
        - name: riskLevel
          in: path
          required: true
          schema:
            type: string
            enum:
              - LOW
              - MODERATE
              - HIGH
              - CRITICAL
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PsychosocialAssessment'
  /api/v1/psychosocial-assessments/high-risk:
    get:
      tags:
        - psychosocial-assessment-controller
      operationId: getHighRiskAssessments
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PsychosocialAssessment'
  /api/v1/psychosocial-assessments/date-range:
    get:
      tags:
        - psychosocial-assessment-controller
      operationId: getAssessmentsInDateRange
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PsychosocialAssessment'
  /api/v1/emotional-diary/user/{userId}:
    get:
      tags:
        - emotional-diary-controller
      operationId: getDiaryEntriesByUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmotionalDiary'
  /api/v1/emotional-diary/user/{userId}/today:
    get:
      tags:
        - emotional-diary-controller
      operationId: hasEntryForToday
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/v1/emotional-diary/user/{userId}/range:
    get:
      tags:
        - emotional-diary-controller
      operationId: getDiaryEntriesInRange
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmotionalDiary'
  /api/v1/emotional-diary/user/{userId}/latest:
    get:
      tags:
        - emotional-diary-controller
      operationId: getLatestDiaryEntry
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmotionalDiary'
  /api/v1/emotional-diary/user/{userId}/date/{date}:
    get:
      tags:
        - emotional-diary-controller
      operationId: getDiaryEntryByUserAndDate
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmotionalDiary'
  /api/v1/emotional-diary/user/{userId}/average-wellness:
    get:
      tags:
        - emotional-diary-controller
      operationId: getAverageWellnessScore
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: number
                format: double
  /api/v1/emotional-diary/low-mood:
    get:
      tags:
        - emotional-diary-controller
      operationId: getLowMoodEntries
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmotionalDiary'
  /api/v1/emotional-diary/high-stress:
    get:
      tags:
        - emotional-diary-controller
      operationId: getHighStressEntries
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmotionalDiary'
  /api/v1/audit-logs/user/{userId}:
    get:
      tags:
        - audit-log-controller
      operationId: getLogsByUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
  /api/v1/audit-logs/user/{userId}/recent:
    get:
      tags:
        - audit-log-controller
      operationId: getRecentLogsByUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
  /api/v1/audit-logs/failed:
    get:
      tags:
        - audit-log-controller
      operationId: getFailedOperations
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
  /api/v1/audit-logs/event-type/{eventType}:
    get:
      tags:
        - audit-log-controller
      operationId: getLogsByEventType
      parameters:
        - name: eventType
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
  /api/v1/audit-logs/critical:
    get:
      tags:
        - audit-log-controller
      operationId: getCriticalLogs
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
  /actuator:
    get:
      tags:
        - Actuator
      summary: Actuator root web endpoint
      operationId: links
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
  /actuator/health:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'health'
      operationId: health
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
  /actuator/health/**:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'health-path'
      operationId: health-path
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
components:
  schemas:
    CreateUserRequest:
      required:
        - email
        - name
        - password
        - role
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 2
          type: string
        email:
          type: string
        password:
          maxLength: 2147483647
          minLength: 6
          type: string
        role:
          type: string
          enum:
            - EMPLOYEE
            - MANAGER
            - SYSTEM_ADMIN
      description: Dados do usu√°rio a ser criado
    UserResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - EMPLOYEE
            - MANAGER
            - SYSTEM_ADMIN
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SupportChannel:
      required:
        - description
        - name
      type: object
      properties:
        id:
          type: string
        name:
          maxLength: 100
          minLength: 2
          type: string
        description:
          maxLength: 500
          minLength: 0
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        website:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreatePsychosocialAssessmentRequest:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
        workStressLevel:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        workLifeBalance:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        jobSatisfaction:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        relationshipWithColleagues:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        personalWellbeing:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
    PsychosocialAssessment:
      required:
        - userId
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        workStressLevel:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        workLifeBalance:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        jobSatisfaction:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        relationshipWithColleagues:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        personalWellbeing:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        overallScore:
          type: number
          format: double
        riskLevel:
          type: string
          enum:
            - LOW
            - MODERATE
            - HIGH
            - CRITICAL
        isComplete:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateEmotionalDiaryRequest:
      required:
        - entryDate
        - moodLevel
        - userId
      type: object
      properties:
        userId:
          type: string
        entryDate:
          type: string
          format: date
        moodLevel:
          type: string
          enum:
            - VERY_LOW
            - LOW
            - NEUTRAL
            - GOOD
            - VERY_GOOD
        energyLevel:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        stressLevel:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        sleepQuality:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
    EmotionalDiary:
      required:
        - entryDate
        - moodLevel
        - userId
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        entryDate:
          type: string
          format: date
        moodLevel:
          type: string
          enum:
            - VERY_LOW
            - LOW
            - NEUTRAL
            - GOOD
            - VERY_GOOD
        energyLevel:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        stressLevel:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        sleepQuality:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    LoginRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    AuditLog:
      required:
        - description
        - eventType
        - timestamp
      type: object
      properties:
        id:
          type: string
        eventType:
          type: string
        description:
          type: string
        userId:
          type: string
        userEmail:
          type: string
        httpMethod:
          type: string
        requestUrl:
          type: string
        ipAddress:
          type: string
        severity:
          type: string
        resourceId:
          type: string
        success:
          type: boolean
        errorMessage:
          type: string
        timestamp:
          type: string
          format: date-time
    Link:
      type: object
      properties:
        href:
          type: string
        templated:
          type: boolean
  securitySchemes:
    HTTPBasicAuthentication:
      type: http
      description: 'HTTP Basic Authentication. Use: admin / admin123'
      scheme: basic
